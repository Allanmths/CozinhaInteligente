// üîÑ MIGRA√á√ÉO FIREBASE - ADICIONAR RESTAURANTID
// Execute este script no console do Firebase ou Node.js para migrar dados existentes

console.log('üöÄ === MIGRA√á√ÉO FIREBASE - RESTAURANT ID ===');

// Fun√ß√£o para migrar uma cole√ß√£o
async function migrateCollection(collectionName, defaultRestaurantId) {
    console.log(`üì¶ Migrando cole√ß√£o: ${collectionName}`);
    
    try {
        const db = firebase.firestore();
        const snapshot = await db.collection(collectionName).get();
        
        console.log(`üìä Documentos encontrados: ${snapshot.size}`);
        
        const batch = db.batch();
        let updateCount = 0;
        
        snapshot.docs.forEach(doc => {
            const data = doc.data();
            
            // Se n√£o tem restaurantId, adicionar
            if (!data.restaurantId) {
                const docRef = db.collection(collectionName).doc(doc.id);
                batch.update(docRef, {
                    restaurantId: defaultRestaurantId,
                    updatedAt: new Date().toISOString(),
                    migratedAt: new Date().toISOString()
                });
                updateCount++;
            }
        });
        
        if (updateCount > 0) {
            await batch.commit();
            console.log(`‚úÖ ${collectionName}: ${updateCount} documentos migrados`);
        } else {
            console.log(`‚úÖ ${collectionName}: Nenhuma migra√ß√£o necess√°ria`);
        }
        
        return updateCount;
        
    } catch (error) {
        console.error(`‚ùå Erro ao migrar ${collectionName}:`, error);
        return 0;
    }
}

// Fun√ß√£o principal de migra√ß√£o
async function executeMigration() {
    // Verificar se usu√°rio est√° logado
    const user = firebase.auth().currentUser;
    if (!user) {
        console.error('‚ùå Usu√°rio n√£o logado. Fa√ßa login primeiro.');
        return;
    }
    
    console.log(`üë§ Usu√°rio logado: ${user.email}`);
    
    // Obter ou criar restaurantId para o usu√°rio atual
    let restaurantId;
    
    try {
        const db = firebase.firestore();
        const userDoc = await db.collection('users').doc(user.uid).get();
        
        if (userDoc.exists()) {
            restaurantId = userDoc.data().restaurantId;
            console.log(`üè¢ Restaurant ID encontrado: ${restaurantId}`);
        } else {
            // Criar restaurante para usu√°rio sem perfil
            restaurantId = 'rest_' + Math.random().toString(36).substring(2, 15);
            console.log(`üè¢ Criando novo restaurante: ${restaurantId}`);
            
            // Criar restaurante
            await db.collection('restaurants').doc(restaurantId).set({
                name: 'Meu Restaurante',
                accessCode: Math.random().toString(36).substring(2, 8).toUpperCase(),
                ownerId: user.uid,
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString(),
                status: 'active',
                settings: {
                    currency: 'BRL',
                    timezone: 'America/Sao_Paulo',
                    features: {
                        multiUser: true,
                        reports: true,
                        inventory: true
                    }
                }
            });
            
            // Criar perfil do usu√°rio
            await db.collection('users').doc(user.uid).set({
                name: user.displayName || user.email.split('@')[0],
                email: user.email,
                restaurantId: restaurantId,
                role: 'admin',
                permissions: ['all'],
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString(),
                isActive: true
            });
            
            console.log(`‚úÖ Restaurante e usu√°rio criados`);
        }
    } catch (error) {
        console.error('‚ùå Erro ao obter/criar restaurante:', error);
        return;
    }
    
    if (!restaurantId) {
        console.error('‚ùå N√£o foi poss√≠vel determinar o restaurantId');
        return;
    }
    
    // Lista de cole√ß√µes para migrar
    const collections = [
        'insumos',
        'pratos', 
        'fichasTecnicas',
        'compras',
        'fornecedores',
        'configuracoes'
    ];
    
    console.log(`üìã Cole√ß√µes a migrar: ${collections.join(', ')}`);
    
    let totalMigrated = 0;
    
    // Migrar cada cole√ß√£o
    for (const collection of collections) {
        const migrated = await migrateCollection(collection, restaurantId);
        totalMigrated += migrated;
        
        // Pequena pausa entre migra√ß√µes
        await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    console.log(`üéâ === MIGRA√á√ÉO CONCLU√çDA ===`);
    console.log(`üìä Total de documentos migrados: ${totalMigrated}`);
    console.log(`üè¢ Restaurant ID utilizado: ${restaurantId}`);
    
    // Recarregar a p√°gina para aplicar as novas regras
    if (totalMigrated > 0) {
        console.log(`üîÑ Recarregando p√°gina em 3 segundos...`);
        setTimeout(() => {
            window.location.reload();
        }, 3000);
    }
}

// Executar migra√ß√£o
executeMigration();

// Exportar fun√ß√µes para uso manual se necess√°rio
window.migrateCollection = migrateCollection;
window.executeMigration = executeMigration;
