// üîÑ MIGRA√á√ÉO DE EMERG√äNCIA - CORRIGIR PROBLEMAS DE PERMISS√ÉO
// Execute este c√≥digo no console do navegador ap√≥s fazer login

console.log('üöÄ === MIGRA√á√ÉO DE EMERG√äNCIA - COZINHA INTELIGENTE ===');

async function emergencyMigration() {
    try {
        // Verificar autentica√ß√£o
        if (!window.currentUser) {
            console.error('‚ùå Usu√°rio n√£o logado. Fa√ßa login primeiro.');
            return;
        }
        
        console.log('‚úÖ Usu√°rio logado:', window.currentUser.email);
        
        // Verificar Firebase Services
        if (!window.firebaseServices) {
            console.error('‚ùå Firebase services n√£o dispon√≠vel');
            return;
        }
        
        const { db, collection, getDocs, doc: fbDoc, setDoc, updateDoc, getDoc } = window.firebaseServices;
        
        // 1. CRIAR/VERIFICAR PERFIL DO USU√ÅRIO
        console.log('üìã 1. Verificando perfil do usu√°rio...');
        
        const userRef = fbDoc(db, 'users', window.currentUser.uid);
        let userDoc;
        
        try {
            userDoc = await getDoc(userRef);
        } catch (error) {
            console.log('‚ö†Ô∏è Erro ao buscar usu√°rio:', error.message);
        }
        
        let restaurantId;
        
        if (!userDoc || !userDoc.exists()) {
            // Criar novo usu√°rio
            restaurantId = 'rest_' + Date.now() + '_' + Math.random().toString(36).substring(2, 8);
            
            console.log('üè¢ Criando restaurante:', restaurantId);
            
            // Criar restaurante
            await setDoc(fbDoc(db, 'restaurants', restaurantId), {
                name: 'Meu Restaurante',
                accessCode: Math.random().toString(36).substring(2, 8).toUpperCase(),
                ownerId: window.currentUser.uid,
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString(),
                status: 'active',
                settings: {
                    currency: 'BRL',
                    timezone: 'America/Sao_Paulo'
                }
            });
            
            console.log('üë§ Criando usu√°rio...');
            
            // Criar usu√°rio
            await setDoc(fbDoc(db, 'users', window.currentUser.uid), {
                name: window.currentUser.displayName || window.currentUser.email.split('@')[0],
                email: window.currentUser.email,
                restaurantId: restaurantId,
                role: 'admin',
                permissions: ['all'],
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString(),
                isActive: true
            });
            
            console.log('‚úÖ Perfil criado com sucesso');
        } else {
            const userData = userDoc.data();
            restaurantId = userData.restaurantId;
            console.log('‚úÖ Perfil existente encontrado. Restaurant ID:', restaurantId);
            
            if (!restaurantId) {
                // Gerar restaurantId se n√£o tiver
                restaurantId = 'rest_' + Date.now() + '_' + Math.random().toString(36).substring(2, 8);
                await updateDoc(userRef, {
                    restaurantId: restaurantId,
                    updatedAt: new Date().toISOString()
                });
                console.log('‚úÖ Restaurant ID adicionado ao usu√°rio:', restaurantId);
            }
        }
        
        // 2. MIGRAR DADOS SEM RESTAURANTID
        const collections = ['insumos', 'pratos', 'fichasTecnicas', 'compras', 'fornecedores'];
        
        for (const collectionName of collections) {
            console.log(`üì¶ 2. Migrando ${collectionName}...`);
            
            try {
                // Buscar documentos sem restaurantId
                const snapshot = await getDocs(collection(db, collectionName));
                
                if (snapshot.empty) {
                    console.log(`   ‚úÖ ${collectionName}: Nenhum documento encontrado`);
                    continue;
                }
                
                let updatedCount = 0;
                
                for (const doc of snapshot.docs) {
                    const data = doc.data();
                    if (!data.restaurantId) {
                        try {
                            await updateDoc(fbDoc(db, collectionName, doc.id), {
                                restaurantId: restaurantId,
                                updatedAt: new Date().toISOString(),
                                migratedAt: new Date().toISOString()
                            });
                            updatedCount++;
                        } catch (error) {
                            console.warn(`   ‚ö†Ô∏è Erro ao atualizar documento ${doc.id}:`, error.message);
                        }
                    }
                }
                
                console.log(`   ‚úÖ ${collectionName}: ${updatedCount} documentos migrados`);
                
            } catch (error) {
                console.error(`   ‚ùå Erro na migra√ß√£o de ${collectionName}:`, error.message);
            }
        }
        
        // 3. ATUALIZAR ESTADO GLOBAL
        console.log('üîÑ 3. Atualizando estado da aplica√ß√£o...');
        
        if (window.currentRestaurant) {
            window.currentRestaurant.id = restaurantId;
        } else {
            window.currentRestaurant = { id: restaurantId };
        }
        
        console.log('üéâ === MIGRA√á√ÉO CONCLU√çDA ===');
        console.log('üìä Restaurant ID:', restaurantId);
        
        // Recarregar dados
        if (window.loadUserProfile) {
            console.log('üîÑ Recarregando perfil do usu√°rio...');
            try {
                await window.loadUserProfile();
            } catch (error) {
                console.log('‚ö†Ô∏è Erro ao recarregar perfil:', error.message);
            }
        }
        
        console.log('‚úÖ Sistema pronto para uso!');
        
        return true;
        
    } catch (error) {
        console.error('‚ùå Erro na migra√ß√£o de emerg√™ncia:', error);
        return false;
    }
}

// Fun√ß√£o para corrigir especificamente o problema de usu√°rios
async function fixUserPermissions() {
    try {
        console.log('üîß === CORRE√á√ÉO DE PERMISS√ïES DE USU√ÅRIOS ===');
        
        if (!window.firebaseServices || !window.currentUser) {
            console.error('‚ùå Pr√©-requisitos n√£o atendidos');
            return;
        }
        
        const { db, collection, getDocs, doc: fbDoc, updateDoc } = window.firebaseServices;
        
        // Buscar todos os usu√°rios e adicionar restaurantId se necess√°rio
        console.log('üë• Carregando usu√°rios...');
        
        try {
            const usersSnapshot = await getDocs(collection(db, 'users'));
            
            for (const userDoc of usersSnapshot.docs) {
                const userData = userDoc.data();
                
                if (!userData.restaurantId) {
                    const restaurantId = 'rest_' + Date.now() + '_' + Math.random().toString(36).substring(2, 8);
                    
                    await updateDoc(fbDoc(db, 'users', userDoc.id), {
                        restaurantId: restaurantId,
                        role: userData.role || 'admin',
                        updatedAt: new Date().toISOString()
                    });
                    
                    console.log(`‚úÖ Usu√°rio ${userData.email} atualizado com restaurante ${restaurantId}`);
                }
            }
            
            console.log('‚úÖ Corre√ß√£o de usu√°rios conclu√≠da');
            
        } catch (error) {
            console.log('‚ö†Ô∏è Erro na corre√ß√£o, mas isso √© esperado com as regras atuais:', error.message);
        }
        
    } catch (error) {
        console.error('‚ùå Erro na corre√ß√£o de permiss√µes:', error);
    }
}

// Executar automaticamente
emergencyMigration();

// Fun√ß√µes dispon√≠veis para uso manual
window.emergencyMigration = emergencyMigration;
window.fixUserPermissions = fixUserPermissions;
