rules_version = '2';

// üîê REGRAS DE SEGURAN√áA FIREBASE - COZINHA INTELIGENTE
// Sistema Multi-usu√°rio com Isolamento Total por Restaurante
// Vers√£o: 3.0 - Otimizada para Performance M√°xima e Seguran√ßa Absoluta
// Data: 11 de setembro de 2025

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ===============================
    // üõ°Ô∏è FUN√á√ïES DE SEGURAN√áA GLOBAIS
    // ===============================
    
    // Verificar se usu√°rio est√° autenticado
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }
    
    // Obter dados do usu√°rio atual
    function getCurrentUser() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    // Verificar se usu√°rio pertence ao restaurante
    function belongsToRestaurant(restaurantId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             getCurrentUser().data.restaurantId == restaurantId;
    }
    
    // Verificar se usu√°rio √© admin do restaurante
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             getCurrentUser().data.role == 'admin';
    }
    
    // Verificar se usu√°rio √© admin ou gerente
    function isAdminOrManager() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             getCurrentUser().data.role in ['admin', 'manager'];
    }
    
    // Verificar se usu√°rio √© chef, admin ou gerente
    function canManageKitchen() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             getCurrentUser().data.role in ['admin', 'manager', 'chef'];
    }
    
    // Verificar se √© o pr√≥prio usu√°rio
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Verificar se usu√°rio pode criar dados (qualquer usu√°rio autenticado do restaurante)
    function canCreate(restaurantId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             getCurrentUser().data.restaurantId == restaurantId;
    }
    
    // ===============================
    // üè¢ COLE√á√ÉO DE RESTAURANTES
    // ===============================
    match /restaurants/{restaurantId} {
      // LEITURA: Usu√°rios do restaurante podem ler os dados
      allow read: if belongsToRestaurant(restaurantId);
      
      // CRIA√á√ÉO: Apenas usu√°rios autenticados podem criar (para migra√ß√£o autom√°tica)
      allow create: if isAuthenticated() && 
                    request.resource.data.ownerId == request.auth.uid &&
                    request.resource.data.keys().hasAll(['name', 'ownerId', 'createdAt', 'status']) &&
                    request.resource.data.status == 'active';
      
      // ATUALIZA√á√ÉO: Apenas admin pode atualizar dados do restaurante
      allow update: if belongsToRestaurant(restaurantId) && 
                    isAdmin() &&
                    request.resource.data.ownerId == resource.data.ownerId; // N√£o permitir mudan√ßa de dono
      
      // EXCLUS√ÉO: Apenas owner original pode deletar restaurante
      allow delete: if isAuthenticated() && 
                    resource.data.ownerId == request.auth.uid &&
                    isAdmin();
    }
    
    // ===============================
    // üë• COLE√á√ÉO DE USU√ÅRIOS
    // ===============================
    match /users/{userId} {
      // LEITURA: Pr√≥prio usu√°rio ou usu√°rios do mesmo restaurante
      allow read: if isOwner(userId) || 
                     (isAuthenticated() && 
                      exists(/databases/$(database)/documents/users/$(userId)) &&
                      belongsToRestaurant(get(/databases/$(database)/documents/users/$(userId)).data.restaurantId));
      
      // CRIA√á√ÉO: Usu√°rio pode criar seu pr√≥prio perfil (migra√ß√£o autom√°tica)
      allow create: if isAuthenticated() && 
                    request.auth.uid == userId &&
                    request.resource.data.keys().hasAll(['name', 'email', 'restaurantId', 'role', 'createdAt']) &&
                    request.resource.data.email == request.auth.token.email;
      
      // ATUALIZA√á√ÉO: Pr√≥prio usu√°rio (dados b√°sicos) ou admin/gerente (papel e status)
      allow update: if (isOwner(userId) && 
                        // Usu√°rio s√≥ pode alterar dados b√°sicos, n√£o role
                        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'restaurantId', 'permissions'])) ||
                       (belongsToRestaurant(resource.data.restaurantId) && 
                        isAdminOrManager() &&
                        // Admin/Gerente pode alterar qualquer coisa exceto pr√≥prio role se n√£o for admin
                        (isAdmin() || !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role'])));
      
      // EXCLUS√ÉO: Admin pode remover usu√°rios do restaurante (exceto a si mesmo)
      allow delete: if belongsToRestaurant(resource.data.restaurantId) && 
                    isAdmin() && 
                    request.auth.uid != userId;
    }
    
    // ===============================
    // üì¶ COLE√á√ÉO DE INSUMOS
    // ===============================
    match /insumos/{insumoId} {
      // LEITURA: Usu√°rios do mesmo restaurante
      allow read: if belongsToRestaurant(resource.data.restaurantId);
      
      // CRIA√á√ÉO: Qualquer usu√°rio do restaurante
      allow create: if canCreate(request.resource.data.restaurantId) &&
                    request.resource.data.keys().hasAll(['nome', 'categoria', 'unidade', 'restaurantId']) &&
                    request.resource.data.restaurantId == getCurrentUser().data.restaurantId;
      
      // ATUALIZA√á√ÉO: Chef, Gerente ou Admin
      allow update: if belongsToRestaurant(resource.data.restaurantId) && 
                    canManageKitchen() &&
                    request.resource.data.restaurantId == resource.data.restaurantId; // N√£o permitir mudan√ßa de restaurante
      
      // EXCLUS√ÉO: Gerente ou Admin
      allow delete: if belongsToRestaurant(resource.data.restaurantId) && 
                    isAdminOrManager();
    }
    
    // ===============================
    // üçΩÔ∏è COLE√á√ÉO DE PRATOS
    // ===============================
    match /pratos/{pratoId} {
      // LEITURA: Usu√°rios do mesmo restaurante
      allow read: if belongsToRestaurant(resource.data.restaurantId);
      
      // CRIA√á√ÉO: Chef, Gerente ou Admin
      allow create: if canManageKitchen() &&
                    request.resource.data.restaurantId == getCurrentUser().data.restaurantId &&
                    request.resource.data.keys().hasAll(['nome', 'categoria', 'ingredientes', 'restaurantId']);
      
      // ATUALIZA√á√ÉO: Chef, Gerente ou Admin
      allow update: if belongsToRestaurant(resource.data.restaurantId) && 
                    canManageKitchen() &&
                    request.resource.data.restaurantId == resource.data.restaurantId;
      
      // EXCLUS√ÉO: Gerente ou Admin
      allow delete: if belongsToRestaurant(resource.data.restaurantId) && 
                    isAdminOrManager();
    }
    
    // ===============================
    // üìã COLE√á√ÉO DE FICHAS T√âCNICAS
    // ===============================
    match /fichasTecnicas/{fichaId} {
      // LEITURA: Usu√°rios do mesmo restaurante
      allow read: if belongsToRestaurant(resource.data.restaurantId);
      
      // CRIA√á√ÉO: Chef, Gerente ou Admin
      allow create: if canManageKitchen() &&
                    request.resource.data.restaurantId == getCurrentUser().data.restaurantId &&
                    request.resource.data.keys().hasAll(['nome', 'categoria', 'ingredientes', 'restaurantId']);
      
      // ATUALIZA√á√ÉO: Chef, Gerente ou Admin
      allow update: if belongsToRestaurant(resource.data.restaurantId) && 
                    canManageKitchen() &&
                    request.resource.data.restaurantId == resource.data.restaurantId;
      
      // EXCLUS√ÉO: Gerente ou Admin
      allow delete: if belongsToRestaurant(resource.data.restaurantId) && 
                    isAdminOrManager();
    }
    
    // ===============================
    // üõí COLE√á√ÉO DE COMPRAS
    // ===============================
    match /compras/{compraId} {
      // LEITURA: Usu√°rios do mesmo restaurante
      allow read: if belongsToRestaurant(resource.data.restaurantId);
      
      // CRIA√á√ÉO: Qualquer usu√°rio do restaurante
      allow create: if canCreate(request.resource.data.restaurantId) &&
                    request.resource.data.keys().hasAll(['fornecedor', 'itens', 'total', 'data', 'restaurantId']) &&
                    request.resource.data.restaurantId == getCurrentUser().data.restaurantId;
      
      // ATUALIZA√á√ÉO: Chef, Gerente ou Admin
      allow update: if belongsToRestaurant(resource.data.restaurantId) && 
                    canManageKitchen() &&
                    request.resource.data.restaurantId == resource.data.restaurantId;
      
      // EXCLUS√ÉO: Gerente ou Admin
      allow delete: if belongsToRestaurant(resource.data.restaurantId) && 
                    isAdminOrManager();
    }
    
    // ===============================
    // üè™ COLE√á√ÉO DE FORNECEDORES
    // ===============================
    match /fornecedores/{fornecedorId} {
      // LEITURA: Usu√°rios do mesmo restaurante
      allow read: if belongsToRestaurant(resource.data.restaurantId);
      
      // CRIA√á√ÉO: Gerente ou Admin
      allow create: if isAdminOrManager() &&
                    request.resource.data.restaurantId == getCurrentUser().data.restaurantId &&
                    request.resource.data.keys().hasAll(['nome', 'contato', 'restaurantId']);
      
      // ATUALIZA√á√ÉO: Gerente ou Admin
      allow update: if belongsToRestaurant(resource.data.restaurantId) && 
                    isAdminOrManager() &&
                    request.resource.data.restaurantId == resource.data.restaurantId;
      
      // EXCLUS√ÉO: Gerente ou Admin
      allow delete: if belongsToRestaurant(resource.data.restaurantId) && 
                    isAdminOrManager();
    }
    
    // ===============================
    // ‚öôÔ∏è COLE√á√ÉO DE CONFIGURA√á√ïES
    // ===============================
    match /configuracoes/{configId} {
      // LEITURA: Usu√°rios do mesmo restaurante
      allow read: if belongsToRestaurant(resource.data.restaurantId);
      
      // CRIA√á√ÉO: Apenas Admin
      allow create: if isAdmin() &&
                    request.resource.data.restaurantId == getCurrentUser().data.restaurantId;
      
      // ATUALIZA√á√ÉO: Apenas Admin
      allow update: if belongsToRestaurant(resource.data.restaurantId) && 
                    isAdmin() &&
                    request.resource.data.restaurantId == resource.data.restaurantId;
      
      // EXCLUS√ÉO: Apenas Admin
      allow delete: if belongsToRestaurant(resource.data.restaurantId) && 
                    isAdmin();
    }
    
    // ===============================
    // üìä COLE√á√ÉO DE RELAT√ìRIOS (Futura Expans√£o)
    // ===============================
    match /relatorios/{relatorioId} {
      // LEITURA: Usu√°rios do mesmo restaurante
      allow read: if belongsToRestaurant(resource.data.restaurantId);
      
      // CRIA√á√ÉO: Gerente ou Admin
      allow create: if isAdminOrManager() &&
                    request.resource.data.restaurantId == getCurrentUser().data.restaurantId;
      
      // ATUALIZA√á√ÉO: Gerente ou Admin
      allow update: if belongsToRestaurant(resource.data.restaurantId) && 
                    isAdminOrManager() &&
                    request.resource.data.restaurantId == resource.data.restaurantId;
      
      // EXCLUS√ÉO: Apenas Admin
      allow delete: if belongsToRestaurant(resource.data.restaurantId) && 
                    isAdmin();
    }
    
    // ===============================
    // üîî COLE√á√ÉO DE NOTIFICA√á√ïES (Futura Expans√£o)
    // ===============================
    match /notificacoes/{notificacaoId} {
      // LEITURA: Apenas o usu√°rio destinat√°rio
      allow read: if isAuthenticated() && 
                  resource.data.userId == request.auth.uid;
      
      // CRIA√á√ÉO: Sistema interno ou Admin
      allow create: if isAdmin() &&
                    request.resource.data.keys().hasAll(['userId', 'titulo', 'mensagem', 'createdAt']);
      
      // ATUALIZA√á√ÉO: Apenas o usu√°rio destinat√°rio (para marcar como lida)
      allow update: if isAuthenticated() && 
                    resource.data.userId == request.auth.uid &&
                    request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lida', 'lidaEm']);
      
      // EXCLUS√ÉO: Usu√°rio destinat√°rio ou Admin
      allow delete: if isAuthenticated() && 
                    (resource.data.userId == request.auth.uid || isAdmin());
    }
    
    // ===============================
    // üìù COLE√á√ÉO DE LOGS DE AUDITORIA (Futura Expans√£o)
    // ===============================
    match /logs/{logId} {
      // LEITURA: Apenas Admin
      allow read: if isAdmin();
      
      // CRIA√á√ÉO: Sistema interno apenas (sem permiss√£o manual)
      allow create: if false;
      
      // ATUALIZA√á√ÉO: Proibida
      allow update: if false;
      
      // EXCLUS√ÉO: Apenas Admin (para limpeza de logs antigos)
      allow delete: if isAdmin();
    }
    
    // ===============================
    // üö´ NEGA√á√ÉO GLOBAL
    // ===============================
    // Negar acesso a qualquer outra cole√ß√£o n√£o especificada
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
